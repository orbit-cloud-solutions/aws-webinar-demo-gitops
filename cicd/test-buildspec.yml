version: 0.2

#env:
  #variables:
     # key: "value"
  #parameter-store:
     # key: "value"
     # key: "value"
  #secrets-manager:
     # key: secret-id:json-key:version-stage:version-id
     # key: secret-id:json-key:version-stage:version-id
  #exported-variables:
     # - variable
     # - variable
  #git-credential-helper: yes
#batch:
  #fast-fail: true
  #build-list:
  #build-matrix:
  #build-graph:
phases:
  # install:
    #If you use the Ubuntu standard image 2.0 or later, you must specify runtime-versions.
    #If you specify runtime-versions and use an image other than Ubuntu standard image 2.0, the build fails.
    #runtime-versions:
      # name: version
      # name: version
    # commands:
    #    - command
  # pre_build:
  #   commands:
  #      - export AWS_REGION=$(aws ec2 describe-availability-zones --output text --query 'AvailabilityZones[0].[RegionName]')
  build:
    commands:
       - |    

        env_name=$ENV

        json=$(cat cdk/cdk.json)
        #get URL from the config
        url=$(echo $json | jq -r '.context.config.r53_zone_name')
        # Get the deployments object for the given environment
        deployments=$(echo $json | jq -r --arg env "$env_name" '.context.config.env[$env].deployments')

        # Loop over the deployments and make a curl request for each one
        echo "Checking deployment versions for $env_name environment:"
        echo "$deployments" | jq -r '.[] | .name' | while read name; do
          # Build the URL using the deployment name
          deployment_url="https://$name-$env_name.$url"
          
          # Make the curl request and extract the version from the response
          resp=$(curl -s $deployment_url)
          version=$(echo $resp | grep -Po '(?<=version = )[0-9\.]+')

          # Get the expected version from the deployments object
          expected_version=$(echo "$deployments" | jq -r --arg name "$name" '.[] | select(.name == $name) | .version')

          # Check if the response version matches the expected version
          if [ "$version" = "$expected_version" ]; then
            echo "$name: OK! Expected $expected_version and got $version"
          else
            echo "$name: Mismatch! Expected $expected_version but got $version"
          fi
        done
  # post_build:
  #   commands:
  #      - command
#reports:
  #report-name-or-arn:
    #files:
      # - location
      # - location
    #base-directory: location
    #discard-paths: yes
    #file-format: JunitXml | CucumberJson
#artifacts:
  #files:
    # - location
    # - location
  #name: $(date +%Y-%m-%d)
  #discard-paths: yes
  #base-directory: location
#cache:
  #paths:
    # - paths